from dataclasses import dataclass

@dataclass
class Property:
    """
    A class to represent a property investment.

    This class models the essential characteristics of a property investment,
    including its purchase price, work cost, rental income, and other related
    parameters to calculate profitability, cash flow, and total investment.

    Attributes:
        value (float): The purchase price of the property.
        work_cost (float): The cost of work or renovations on the property.
        contribution (float): The owner's initial contribution or down payment.
        monthly_rent (float): The monthly rental income generated by the property.
        rental_vacancies (float): The number of months the property is expected to be vacant.
        expenses (float): The annual expenses related to the property (taxes, maintenance, etc.).
    """
    value: float
    work_cost: float
    contribution: float
    monthly_rent: float
    rental_vacancies: float
    expenses: float

    def total_value(self) -> float:
        """
        Calculate and return the total property cost including fees and the cost of work.

        This method calculates the total amount invested in the property, which is the sum
        of the property's purchase price, cost fees and the cost of any renovations or work.

        Returns:
            float: The total cost of the property, including the purchase price and work cost.
        """
        return self.value + self.work_cost

    def profitability(self) -> float:
        """
        Calculate the profitability percentage of the property investment.

        This method computes the profitability of the property by taking into account
        the rental income, vacancies, expenses, and the total investment (property value 
        plus work cost minus owner's contribution).

        Returns:
            float: The profitability of the property as a percentage.
        """
        annual_rent = self.monthly_rent * 12
        vacancy_amount = self.rental_vacancies * self.monthly_rent
        rent_after_vacancy = annual_rent - vacancy_amount
        net_income = rent_after_vacancy - self.expenses
        total_investment = self.total_value() - self.contribution
        return (net_income / total_investment) * 100

    def calculate_cashflow_pretax(self, monthly_payment: float) -> float:
        """
        Calculate the pre-tax cash flow of the property.

        The pre-tax cash flow is the difference between the monthly rental income,
        the monthly loan payment, and the monthly expenses related to the property.
        This calculation does not include taxes but gives an estimate of the gross 
        cash flow generated by the property.

        Args:
            monthly_payment (float): The monthly payment of the property loan.

        Returns:
            float: The pre-tax cash flow of the property.
        """
        # Calculate the pre-tax cash flow
        cashflow_pretax = self.monthly_rent - monthly_payment - (self.expenses / 12)
        return cashflow_pretax

@dataclass
class Loan:
    """
    A class to represent a loan.

    This class models a loan with its principal amount, interest rate, duration, 
    and associated insurance costs. It provides methods to calculate monthly 
    payments, total loan cost, loan cost (interest and insurance), and the 
    total monthly payment (including loan and property expenses).

    Attributes:
        amount (float): The principal amount of the loan.
        interest_rate (float): The annual interest rate for the loan as a percentage.
        duration_years (float): The duration of the loan in years.
        loan_insurance_cost (float): The monthly cost of loan insurance.
        pno_insurance_cost (float): The monthly cost of ownerâ€™s insurance (PNO).
    """
    amount: float
    interest_rate: float
    duration_years: float
    loan_insurance_cost: float
    pno_insurance_cost: float

    def calculate_monthly_payment(self) -> float:
        """
        Calculate the monthly payment for the loan, including insurance costs.

        This method calculates the monthly payment using the loan amount, interest rate,
        and duration (in years). It also adds the loan insurance and PNO insurance costs 
        to the monthly payment.

        Formula used: 
            Monthly Payment = Loan Amount * (r * (1 + r)^n) / ((1 + r)^n - 1)
            Where:
                r = monthly interest rate
                n = number of months

        Args:
            None

        Returns:
            float: The total monthly payment, including both the loan repayment and insurance costs.
        """
        # Monthly interest rate
        r = self.interest_rate / 100 / 12
        # Number of monthly payments
        n = self.duration_years * 12
        # Insurance costs (sum of loan insurance and PNO insurance)
        insurance_costs = self.loan_insurance_cost + self.pno_insurance_cost
        # Monthly payment without insurance
        monthly_payment_without_insurance = self.amount * (r * (1 + r) ** n) / ((1 + r) ** n - 1)
        # Return the total monthly payment including insurance
        return monthly_payment_without_insurance + insurance_costs

    def total_cost(self) -> float:
        """
        Calculate the total cost of the loan over its entire duration, including insurance.

        This method calculates the total amount paid over the life of the loan, which is
        the sum of all monthly payments (principal and insurance) over the loan duration.

        Args:
            None

        Returns:
            float: The total cost of the loan, including interest and insurance over the loan's duration.
        """
        # Calculate the monthly payment
        monthly_payment = self.calculate_monthly_payment()
        # Calculate the total cost over the loan duration (number of months)
        n = self.duration_years * 12
        return monthly_payment * n

    def loan_cost(self) -> float:
        """
        Calculate the cost of the loan, which is the total paid amount minus the original loan amount.

        This method calculates how much extra has been paid over the life of the loan,
        including interest and insurance costs. It is the total cost minus the original loan principal.

        Args:
            None

        Returns:
            float: The total cost of the loan minus the original loan amount (i.e., interest and insurance costs).
        """
        return self.total_cost() - self.amount

    def calculate_loan_and_expenses(self, monthly_payment: float, expenses: float) -> float:
        """
        Calculate the total monthly payment including both the loan payment and property-related expenses.

        This method computes the total monthly amount that needs to be paid, which includes:
        - The loan monthly payment (calculated by `calculate_monthly_payment()`).
        - The monthly equivalent of annual property expenses (e.g., maintenance, taxes).

        The function assumes that the expenses parameter is provided as an annual value, 
        and it divides this amount by 12 to get the monthly cost.

        Args:
            monthly_payment (float): The monthly loan payment (calculated by `calculate_monthly_payment()`).
            expenses (float): The annual property-related expenses (e.g., taxes, maintenance, insurance).

        Returns:
            float: The total monthly payment, which is the sum of the loan payment and the monthly equivalent of the expenses.
        """
        # Convert annual expenses to monthly and add it to the loan monthly payment
        loan_and_expenses_payment = monthly_payment + (expenses / 12)
        return loan_and_expenses_payment